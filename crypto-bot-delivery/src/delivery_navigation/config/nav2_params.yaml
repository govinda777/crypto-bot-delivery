# nav2_params.yaml

# Global parameters
# amcl:
#   ros__parameters:
#     use_map_topic: true
#     # Add other AMCL parameters here if SLAM is not used initially
#     # or if AMCL is used alongside SLAM output for localization.

# behavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw
#     footprint_topic: local_costmap/published_footprint
#     cycle_frequency: 10.0
#     behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     drive_on_heading:
#       plugin: "nav2_behaviors/DriveOnHeading"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: map
#     robot_base_frame: base_link
#     transform_timeout: 0.1

# bt_navigator:
#   ros__parameters:
#     use_sim_time: True # Set to true if using Gazebo
#     global_frame: map
#     robot_base_frame: base_link
#     odom_topic: /odom
#     bt_xml_filename: "navigate_w_replanning_and_recovery.xml" # Default BT
#     # default_bt_xml_filename: "path/to/your/custom_behavior_tree.xml" # If you have a custom one
#     plugin_lib_names:
#     - nav2_compute_path_to_pose_action_bt_node
#     - nav2_compute_path_through_poses_action_bt_node
#     - nav2_follow_path_action_bt_node
#     - nav2_back_up_action_bt_node
#     - nav2_spin_action_bt_node
#     - nav2_wait_action_bt_node
#     - nav2_clear_costmap_service_bt_node
#     - nav2_is_stuck_condition_bt_node
#     - nav2_goal_reached_condition_bt_node
#     - nav2_goal_updated_condition_bt_node
#     - nav2_globally_updated_goal_condition_bt_node
#     - nav2_is_path_valid_condition_bt_node
#     - nav2_initial_pose_received_condition_bt_node
#     - nav2_reinitialize_global_localization_service_bt_node
#     - nav2_rate_controller_bt_node
#     - nav2_distance_controller_bt_node
#     - nav2_speed_controller_bt_node
#     - nav2_truncate_path_action_bt_node
#     - nav2_goal_updater_node_bt_node
#     - nav2_recovery_node_bt_node
#     - nav2_pipeline_sequence_bt_node
#     - nav2_round_robin_node_bt_node
#     - nav2_transform_available_condition_bt_node
#     - nav2_time_expired_condition_bt_node
#     - nav2_distance_traveled_condition_bt_node
#     - nav2_single_trigger_bt_node
#     - nav2_is_battery_low_condition_bt_node
#     - nav2_navigate_through_poses_action_bt_node
#     - nav2_navigate_to_pose_action_bt_node
#     - nav2_remove_passed_goals_action_bt_node
#     - nav2_planner_selector_bt_node
#     - nav2_controller_selector_bt_node
#     - nav2_goal_checker_selector_bt_node

# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 1.0 # Default: 1.0
#     use_sim_time: True # Set to true if using Gazebo
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner" # Classic NavFn A* planner
#       tolerance: 0.5
#       use_astar: false # Use Dijkstra's if false
#       allow_unknown: true

# controller_server:
#   ros__parameters:
#     use_sim_time: True # Set to true if using Gazebo
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.001
#     min_theta_velocity_threshold: 0.001
#     failure_tolerance: 0.3
#     progress_checker_plugin: "progress_checker"
#     goal_checker_plugins: ["goal_checker"] # "precise_goal_checker" is another option
#     controller_plugins: ["FollowPath"]
#     FollowPath:
#       plugin: "nav2_dwb_controller/DWBLocalPlanner" # DWB, alternatives: TEB, RPP
#       # Parameters for DWB or other chosen controller
#       # For DWB, you'd specify critics, etc.
#       # Example for a generic parameter:
#       # max_vel_x: 0.5
#       # min_vel_x: 0.1
#       # acc_lim_x: 2.5
#       # transform_tolerance: 0.2 # For TF transforms
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#       stateful: True

# local_costmap:
#   local_costmap:
#     ros__parameters:
#       global_frame: odom # Typically odom for local costmap
#       robot_base_frame: base_link
#       use_sim_time: True # Set to true if using Gazebo
#       update_frequency: 5.0
#       publish_frequency: 2.0
#       width: 3
#       height: 3
#       resolution: 0.05
#       robot_radius: 0.22 # Example, adjust to actual robot
#       plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]
#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: True
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#           raytrace_max_range: 3.0
#           raytrace_min_range: 0.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#       voxel_layer: # If using 3D lidar or point clouds
#         plugin: "nav2_costmap_2d::VoxelLayer"
#         enabled: False # Enable if you have 3D sensor data
#         # observation_sources: pointcloud
#         # pointcloud:
#         #   topic: /intel_realsense_r200_depth/points
#         #   max_obstacle_height: 2.0
#         #   clearing: True
#         #   marking: True
#         #   data_type: "PointCloud2"
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         enabled: True
#         cost_scaling_factor: 3.0 # Exponential rate of decay
#         inflation_radius: 0.55
#   always_send_full_costmap: True

# global_costmap:
#   global_costmap:
#     ros__parameters:
#       global_frame: map
#       robot_base_frame: base_link
#       use_sim_time: True # Set to true if using Gazebo
#       update_frequency: 1.0
#       publish_frequency: 1.0
#       resolution: 0.05 # Should match map resolution
#       robot_radius: 0.22 # Example
#       plugins: ["static_layer", "obstacle_layer", "inflation_layer"] # Voxel layer can also be here
#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         enabled: True
#         map_subscribe_transient_local: True # Use map topic
#       obstacle_layer: # Can be shared with local_costmap or configured differently
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: True
#         observation_sources: scan
#         scan: {data_type: LaserScan, topic: /scan, marking: true, clearing: true}
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         enabled: True
#         cost_scaling_factor: 3.0
#         inflation_radius: 0.55
#   always_send_full_costmap: True

# lifecycle_manager_navigation:
#   ros__parameters:
#     autostart: True
#     node_names: [
#       "planner_server",
#       "controller_server",
#       "behavior_server",
#       "bt_navigator",
#       # "waypoint_follower" # if used
#       # "velocity_smoother" # if used
#     ]

# lifecycle_manager_localization:
lifecycle_manager_localization:
  ros__parameters:
    autostart: True
    node_names: [
      "slam_toolbox"
      # "map_server", # Not used when SLAM is building the map
      # "amcl"        # Not used when SLAM is building the map
    ]

map_server: # Only if you are loading a pre-existing map and not using SLAM initially
  ros__parameters:
    use_sim_time: True
    yaml_filename: "path/to/your/map.yaml" # Provide actual path later

slam_toolbox:
  ros__parameters:
    use_sim_time: True
    solver_plugin: "solver_plugins::CeresSolver" # Common solver
    ceres_linear_solver: "SPARSE_NORMAL_CHOLESKY"
    ceres_preconditioner: "SCHUR_JACOBI"
    ceres_trust_strategy: "LEVENBERG_MARQUARDT"
    ceres_dogleg_type: "TRADITIONAL_DOGLEG"
    ceres_loss_function: "None" # Or "HuberLoss", "CauchyLoss"

    # Frame names
    odom_frame: "odom"
    map_frame: "map"
    base_frame: "base_link" # Ensure this matches your robot's base frame
    scan_topic: "/scan"    # Ensure this matches your LiDAR topic

    # General SLAM parameters
    mode: "mapping" # "mapping" or "localization"
    debug_logging: False
    throttle_scans: 1
    transform_publish_period: 0.02 # ~50hz
    map_update_interval: 5.0 # Seconds
    resolution: 0.05 # Meters
    max_laser_range: 8.0 # Meters, example, adjust based on sensor
    minimum_travel_distance: 0.2 # Meters
    minimum_travel_heading: 0.1745 # Radians (e.g., 10 degrees)
    map_file_name: "saved_map" # Default name for saving maps
    # map_start_pose: [0.0, 0.0, 0.0] # If starting SLAM from a known pose
    # map_visualizations: True # To publish more visualization topics

    # Specific to mapping mode
    use_scan_matching: True
    use_scan_barycenter: True
    minimum_scan_angle_for_matching: -1.5708 # Radians, e.g., -90 degrees
    maximum_scan_angle_for_matching: 1.5708  # Radians, e.g., +90 degrees
    # correlation_search_space_dimension/resolution/cost_offset if not using default graph-based

    # Graph-based SLAM parameters (if using graph-based solver)
    # processor_type: "ROSSLAMProcessor" (default, graph-based)
    # graph_update_distance_trigger: 0.1
    # graph_update_angle_trigger: 0.087 # Radians

    # For localization mode (after a map is created)
    # localization_mode_scan_transform_tolerance: [0.1, 0.1, 0.087] # x, y, yaw
    # localization_mode_map_load_path: "path/to/your/map_name" # Serialized map path

# velocity_smoother: # Optional, for smoother robot motion
#   ros__parameters:
#     smoothing_frequency: 20.0
#     scale_velocities: False
#     feedback: "OPEN_LOOP" # Or "CLOSED_LOOP"
#     # Add other velocity smoother params

# waypoint_follower: # Optional, for multi-waypoint navigation
#   ros__parameters:
#     loop_rate: 20
#     stop_on_failure: false
#     # Add other waypoint follower params
